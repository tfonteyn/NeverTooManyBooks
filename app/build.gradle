/*
 * @Copyright 2018-2024 HardBackNutter
 * @License GNU General Public License
 *
 * This file is part of NeverTooManyBooks.
 *
 * NeverTooManyBooks is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * NeverTooManyBooks is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NeverTooManyBooks. If not, see <http://www.gnu.org/licenses/>.
 */
//file:noinspection LongLine

import java.time.LocalDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("de.mannodermaus.android-junit5")
}

/*
    $HOME/.gradle/gradle.properties:
        NeverTooManyBooks.properties=$HOME/blah/blah/NeverTooManyBooks.properties

    $HOME/blah/blah/NeverTooManyBooks.properties:
        sign.storeFile=$HOME/blah/blah/keystore.jks
        sign.storePassword=MyStorePassword
        sign.keyAlias=MyKeyAlias
        sign.keyPassword=MyKeyPassword

 */
final def props = new Properties()
if (project.hasProperty("NeverTooManyBooks.properties")) {
    final def file = new File(project.property("NeverTooManyBooks.properties"))
    if (file.exists()) {
        props.load(new FileInputStream(file))
    }
}

kotlin {
    jvmToolchain rootProject.ext.toolChain
}

android {
    namespace = "com.hardbacknutter.nevertoomanybooks"
    compileSdk = rootProject.ext.compileSdkVersion

    signingConfigs {
        release {
            storeFile file(props["sign.storeFile"])
            storePassword props["sign.storePassword"]
            keyAlias props["sign.keyAlias"]
            keyPassword props["sign.keyPassword"]
        }
    }

    defaultConfig {
        applicationId = "com.hardbacknutter.nevertoomanybooks"
        versionCode = 76
        versionName = "5.5.0"

        minSdk = rootProject.ext.minSdkVersion
        targetSdk = rootProject.ext.targetSdkVersion

        signingConfig(signingConfigs.release)

        resourceConfigurations += ["de", "en", "en_GB", "es", "fr", "it", "nl", "pt", "vi",
                                   "cs", "el", "pl", "ru", "tr"]

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments["runnerBuilder"] =
                "de.mannodermaus.junit5.AndroidJUnit5Builder"

        // Add the build UTC DateTime; ISO formatted
        buildConfigField("String", "TIMESTAMP", "\"x\"")

        buildConfigField("boolean", "ENABLE_AMAZON", "true")
        buildConfigField("boolean", "ENABLE_BEDETHEQUE", "true")
        buildConfigField("boolean", "ENABLE_BOL", "true")
        buildConfigField("boolean", "ENABLE_GOOGLE_BOOKS", "true")
        buildConfigField("boolean", "ENABLE_ISFDB", "true")
        buildConfigField("boolean", "ENABLE_KB_NL", "true")
        buildConfigField("boolean", "ENABLE_LAST_DODO", "true")
        buildConfigField("boolean", "ENABLE_OPEN_LIBRARY", "true")
        buildConfigField("boolean", "ENABLE_STRIP_INFO", "true")
        buildConfigField("boolean", "ENABLE_STRIP_WEB", "true")

        buildConfigField("boolean", "ENABLE_GOODREADS_BY_EXT_ID", "true")
        buildConfigField("boolean", "ENABLE_LIBRARY_THING_ALT_ED", "true")
    }

    buildTypes {
        release {
            minifyEnabled = true
            shrinkResources = true

            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro")

            resValue("string", "searchSuggestAuthority",
                    "${defaultConfig.applicationId}.SearchSuggestionProvider")
            resValue("string", "fileProviderAuthority",
                    "${defaultConfig.applicationId}.GenericFileProvider")

            // Add the build UTC DateTime; ISO formatted
            buildConfigField("String", "TIMESTAMP",
                    "\"" + LocalDateTime.now(ZoneOffset.UTC)
                            .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\"")

            // under development
            buildConfigField("boolean", "ENABLE_BOOKFINDER", "false")
            // under development
            buildConfigField("boolean", "ENABLE_STRIP_INFO_LOGIN", "false")
            // under development
            buildConfigField("boolean", "EMBEDDED_BARCODE_SCANNER", "false")
        }
        beta {
            initWith(release)
            versionNameSuffix = "-beta"
            // applicationIdSuffix: same as release to be able to update rel->beta

            // Add the build UTC DateTime; ISO formatted
            buildConfigField("String", "TIMESTAMP",
                    "\"" + LocalDateTime.now(ZoneOffset.UTC)
                            .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\"")

            resValue("string", "searchSuggestAuthority",
                    "${defaultConfig.applicationId}.SearchSuggestionProvider.beta")
            resValue("string", "fileProviderAuthority",
                    "${defaultConfig.applicationId}.GenericFileProvider.beta")

            // under development
            buildConfigField("boolean", "ENABLE_BOOKFINDER", "true")
        }
        debug {
            debuggable = true
            versionNameSuffix = "-debug"
            applicationIdSuffix = ".debug"

            resValue("string", "searchSuggestAuthority",
                    "${defaultConfig.applicationId}.SearchSuggestionProvider.debug")
            resValue("string", "fileProviderAuthority",
                    "${defaultConfig.applicationId}.GenericFileProvider.debug")

            // under development
            buildConfigField("boolean", "ENABLE_BOOKFINDER", "true")
            // under development
            buildConfigField("boolean", "ENABLE_STRIP_INFO_LOGIN", "true")
            // under development
            buildConfigField("boolean", "EMBEDDED_BARCODE_SCANNER", "false")
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        // https://developer.android.com/studio/releases/#4-0-0-desugar
        coreLibraryDesugaringEnabled = true
    }

    kotlinOptions {
        jvmTarget = 11
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            // Can be enabled to make Log.x work. OR, use Logger.x
            returnDefaultValues = false
            all {
                reports {
                    junitXml.getRequired().set(true)
                    html.getRequired().set(false)
                }
            }
        }
    }

    packagingOptions {
        resources {
            excludes += ["META-INF/LICENSE",
                         "META-INF/LICENSE.md",
                         "META-INF/LICENSE.txt",
                         "META-INF/license.txt",
                         "META-INF/LICENSE-notice.md",
                         "META-INF/NOTICE",
                         "META-INF/NOTICE.txt",
                         "META-INF/notice.txt",
                         "META-INF/ASL2.0",
                         "META-INF/DEPENDENCIES",
                         "META-INF/README.md",
                         "META-INF/CHANGES"]
        }
    }

    lint {
        // allow command line builds to complete
        abortOnError = false
    }

    applicationVariants.all {
        final variant ->
            variant.outputs.all {
                outputFileName = "${rootProject.name}-${defaultConfig.versionName}-${variant.name}.apk"
            }
    }

    // This configuration specifies how an app bundle should be split
    // in terms of language, density and cpu architecture (abi).
    // The default values are true. This means a split will be generated.
    bundle {
        language {
            enableSplit = false
        }
//        density {
//            enableSplit = true
//        }
//        abi {
//            enableSplit = true
//        }
    }
}

dependencies {
    implementation project(path: ":core")
    implementation project(path: ":fastscroller")
    // We are using an updated/repacked org.json, version 20230227
    // https://github.com/stleary/JSON-java
    implementation project(path: ":repacked-org-json")

    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs_nio:${desugarVersion}")

    implementation("androidx.activity:activity-ktx:${androidxActivityVersion}")
    implementation("androidx.annotation:annotation:${androidxAnnotationVersion}")
    implementation("androidx.appcompat:appcompat:${androidxAppcompatVersion}")
    implementation("androidx.cardview:cardview:${androidxCardviewVersion}")
    implementation("androidx.collection:collection:${androidxCollectionVersion}")
    // core is only needed for custom constraint helpers
    implementation("androidx.constraintlayout:constraintlayout-core:${androidxConstraintlayoutCoreVersion}")
    implementation("androidx.constraintlayout:constraintlayout:${androidxConstraintlayoutVersion}")
    implementation("androidx.coordinatorlayout:coordinatorlayout:${androidxCoordinatorlayoutVersion}")
    implementation("androidx.core:core-ktx:${androidxCoreVersion}")
    implementation("androidx.customview:customview:${androidxCustomviewVersion}")
    implementation("androidx.documentfile:documentfile:${androidxDocumentfileVersion}")
    implementation("androidx.drawerlayout:drawerlayout:${androidxDrawerlayoutVersion}")
    implementation("androidx.exifinterface:exifinterface:${androidxExifinterfaceVersion}")
    implementation("androidx.fragment:fragment-ktx:${androidxFragmentVersion}")

    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:${androidxLifecycleVersion}")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:${androidxLifecycleVersion}")

    implementation("androidx.preference:preference-ktx:${androidxPreferenceVersion}")
    implementation("androidx.recyclerview:recyclerview:${androidxRecyclerviewVersion}")
//    implementation("androidx.slidingpanelayout:slidingpanelayout:${androidxSlidingpanelayoutVersion}")
    implementation("androidx.viewpager2:viewpager2:${androidxViewpager2Version}")
    implementation("androidx.window:window:${androidxWindowVersion}")

    // https://github.com/material-components/material-components-android/releases
    implementation("com.google.android.material:material:${googleMaterialVersion}")

    // jsoup HTML parser library @ https://jsoup.org/
    implementation("org.jsoup:jsoup:${jsoupVersion}")

    // CameraX based scanner code from "TinyZXingWrapper"
    releaseImplementation("com.hardbacknutter.tinyzxingwrapper:TinyZXingWrapper:${tinyZxingWrapperVersion}:release@aar")
    betaImplementation("com.hardbacknutter.tinyzxingwrapper:TinyZXingWrapper:${tinyZxingWrapperVersion}:release@aar")
    debugImplementation("com.hardbacknutter.tinyzxingwrapper:TinyZXingWrapper:${tinyZxingWrapperVersion}:debug@aar")

    implementation "com.google.zxing:core:${zxingCoreVersion}"

    implementation("androidx.camera:camera-core:${androidxCameraxVersion}")
    implementation("androidx.camera:camera-camera2:${androidxCameraxVersion}")
    implementation("androidx.camera:camera-lifecycle:${androidxCameraxVersion}")
    implementation("androidx.camera:camera-view:${androidxCameraxVersion}")

    // https://www.acra.ch/docs/Setup/
    implementation("ch.acra:acra-core:${acraVersion}")
    implementation("ch.acra:acra-dialog:${acraVersion}")

    // local tests use JUnit5
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")

    androidTestImplementation("de.mannodermaus.junit5:android-test-core:${mannodermausVersion}")
    androidTestRuntimeOnly("de.mannodermaus.junit5:android-test-runner:${mannodermausVersion}")

    // device tests use JUnit4
    androidTestImplementation("androidx.test:core:${androidxTestCoreVersion}")
    androidTestImplementation("androidx.test:runner:${androidxTestRunnerVersion}")
    androidTestImplementation("androidx.test:rules:${androidxTestRulesVersion}")
    // device tests with LiveData must add this class variable:
    //    @Rule
    //    public TestRule rule = new InstantTaskExecutorRule();
    androidTestImplementation("androidx.arch.core:core-testing:${androidxArchCoreTestingVersion}")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${kotlinxCoroutinesCoreVersion}")

//    testImplementation("org.robolectric:robolectric:4.4")
//    androidTestImplementation("androidx.test.espresso:espresso-core:3.3.0")
}
