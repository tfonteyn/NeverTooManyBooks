/*
 * @Copyright 2018-2024 HardBackNutter
 * @License GNU General Public License
 *
 * This file is part of NeverTooManyBooks.
 *
 * NeverTooManyBooks is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * NeverTooManyBooks is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NeverTooManyBooks. If not, see <http://www.gnu.org/licenses/>.
 */
//file:noinspection LongLine

plugins {
    id("com.android.library")
    id("org.jetbrains.kotlin.android")
    id("de.mannodermaus.android-junit5")
}

kotlin {
    jvmToolchain rootProject.ext.toolChain
}

android {
    namespace = "com.hardbacknutter.nevertoomanybooks.core"
    compileSdk = rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdk = rootProject.ext.minSdkVersion
        targetSdk = rootProject.ext.targetSdkVersion

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments["runnerBuilder"] =
                "de.mannodermaus.junit5.AndroidJUnit5Builder"

        /**
         * RELEASE: Update to latest version: current is 2024-05-07.
         * Some sites don't return full data unless the user agent is set to a valid browser.
         */
        buildConfigField("String", "BROWSER_USER_AGENT",
                "\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0\"")

    }

    buildTypes {
        release {
            minifyEnabled = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro")
        }
        beta {
            initWith(release)
        }
        debug {
            // Enforce testing the proguard rules during debug-builds.
            initWith(release)
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        // https://developer.android.com/studio/releases/#4-0-0-desugar
        coreLibraryDesugaringEnabled = true
    }

    kotlinOptions {
        jvmTarget = 11
    }

    buildFeatures {
        buildConfig = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            // Can be enabled to make Log.x work. OR, use Logger.x
            returnDefaultValues = false
            all {
                reports {
                    junitXml.required.set(true)
                    html.required.set(false)
                }
            }
        }
    }

    lint {
        // allow command line builds to complete
        abortOnError = false
    }
}

dependencies {
    implementation project(path: ":Logger")

    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs_nio:${desugarVersion}")

    implementation("androidx.appcompat:appcompat:${androidxAppcompatVersion}")
    // core is needed for custom constraint helpers
    implementation("androidx.constraintlayout:constraintlayout-core:${androidxConstraintlayoutCoreVersion}")

    implementation("androidx.documentfile:documentfile:${androidxDocumentfileVersion}")
    implementation("androidx.preference:preference-ktx:${androidxPreferenceVersion}")
    implementation("androidx.recyclerview:recyclerview:${androidxRecyclerviewVersion}")

    implementation("com.google.android.material:material:${googleMaterialVersion}")

    // local tests use JUnit5
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")

    androidTestImplementation("de.mannodermaus.junit5:android-test-core:${mannodermausVersion}")
    androidTestRuntimeOnly("de.mannodermaus.junit5:android-test-runner:${mannodermausVersion}")

    // device tests use JUnit4
    androidTestImplementation("androidx.test:core:${androidxTestCoreVersion}")
    androidTestImplementation("androidx.test:runner:${androidxTestRunnerVersion}")
    androidTestImplementation("androidx.test:rules:${androidxTestRulesVersion}")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${kotlinxCoroutinesCoreVersion}")
}